diff --git a/lisp/doom-keybinds.el b/lisp/doom-keybinds.el
index 0cc6e4841..e58e2e720 100644
--- a/lisp/doom-keybinds.el
+++ b/lisp/doom-keybinds.el
@@ -25,6 +25,14 @@ and Emacs states, and for non-evil users.")
 (defvar doom-leader-map (make-sparse-keymap)
   "An overriding keymap for <leader> keys.")
 
+(defvar doom-localleader-map-alist nil
+  "An alist mapping major modes to their localleader keymaps.")
+
+(defvar doom-localleader-map (make-sparse-keymap)
+  "The current major mode's localleader keymap.")
+
+(defvar doom-localleader-current-major-mode nil
+  "The major mode of the current localleader keymap.")
 
 ;;
 ;;; Global keybind settings
@@ -146,11 +154,8 @@ all hooks after it are ignored.")
                     forms))
             (when-let (desc (cadr (memq :which-key udef)))
               (prependq!
-               wkforms `((which-key-add-key-based-replacements
-                           (general--concat t doom-leader-alt-key ,key)
-                           ,desc)
-                         (which-key-add-key-based-replacements
-                           (general--concat t doom-leader-key ,key)
+               wkforms `((which-key-add-keymap-based-replacements doom-leader-map
+                           ,key
                            ,desc))))))))
     (macroexp-progn
      (append (and wkforms `((after! which-key ,@(nreverse wkforms))))
@@ -169,6 +174,43 @@ See `doom-leader-key' and `doom-leader-alt-key' to change the leader prefix."
     :keymaps 'doom-leader-map
     ,@args))
 
+(defmacro doom--define-localleader-leader-key (&rest keys)
+  (let ((modes (cl-mapcar #'general--remove-map
+                          (doom-unquote (progn (pop keys) (pop keys)))))
+        prefix forms wkforms result)
+    (macroexp-progn (dolist (mode modes result)
+                      (unless (keymapp (alist-get mode doom-localleader-map-alist))
+                        (setf (alist-get mode doom-localleader-map-alist)
+                              (make-sparse-keymap)))
+                      (let ((keys keys))
+                        (while keys
+                          (let ((key (pop keys))
+                                (def (pop keys)))
+                            (if (keywordp key)
+                                (when (memq key '(:prefix :infix))
+                                  (setq prefix def))
+                              (when prefix
+                                (setq key `(general--concat t ,prefix ,key)))
+                              (let* ((udef (cdr-safe (doom-unquote def)))
+                                     (bdef (if (general--extended-def-p udef)
+                                               (general--extract-def (general--normalize-extended-def udef))
+                                             def)))
+                                (unless (eq bdef :ignore)
+                                  (push `(define-key
+                                           (alist-get ',mode doom-localleader-map-alist)
+                                           (general--kbd ,key)
+                                           ,bdef)
+                                        forms))
+                                (when-let (desc (cadr (memq :which-key udef)))
+                                  (prependq!
+                                   wkforms `((which-key-add-keymap-based-replacements
+                                               (alist-get ',mode doom-localleader-map-alist)
+                                               ,key
+                                               ,desc))))))))
+                        (prependq! result
+                                   (append (and wkforms `((after! which-key ,@(nreverse wkforms))))
+                                           (nreverse forms))))))))
+
 (defmacro define-localleader-key! (&rest args)
   "Define <localleader> key.
 
@@ -196,8 +238,21 @@ localleader prefix."
 ;;   :prefix/:non-normal-prefix properties because general is incredibly slow
 ;;   binding keys en mass with them in conjunction with :states -- an effective
 ;;   doubling of Doom's startup time!
-(define-prefix-command 'doom/leader 'doom-leader-map)
 (define-key doom-leader-map [override-state] 'all)
+(define-prefix-command 'doom-leader-map)
+(define-prefix-command 'doom-localleader-map)
+
+(add-hook! '(after-change-major-mode-hook
+             doom-switch-buffer-hook
+             doom-switch-window-hook
+             doom-switch-frame-hook)
+  (defun doom-init-localleader-key-h ()
+    "Set the localleader keys for the current major-mode."
+    (unless (and (doom-unreal-buffer-p (current-buffer))
+                 (not (derived-mode-p 'text-mode 'prog-mode 'conf-mode)))
+      (setq doom-localleader-current-major-mode major-mode)
+      (set-keymap-parent doom-localleader-map
+                         (cdr (assq major-mode doom-localleader-map-alist))))))
 
 ;; Bind `doom-leader-key' and `doom-leader-alt-key' as late as possible to give
 ;; the user a chance to modify them.
@@ -211,9 +266,12 @@ localleader prefix."
                    (set-keymap-parent doom-leader-map mode-specific-map))
                   ((equal doom-leader-alt-key "C-x")
                    (set-keymap-parent doom-leader-map ctl-x-map)))
-            (define-key map (kbd doom-leader-alt-key) 'doom/leader))
-        (evil-define-key* '(normal visual motion) map (kbd doom-leader-key) 'doom/leader)
-        (evil-define-key* '(emacs insert) map (kbd doom-leader-alt-key) 'doom/leader))
+            (define-key map (kbd doom-leader-alt-key) #'doom-leader-map)
+            (define-key map (kbd doom-localleader-alt-key) #'doom-localleader-map))
+        (evil-define-key* '(normal visual motion) map (kbd doom-leader-key) #'doom-leader-map)
+        (evil-define-key* '(emacs insert) map (kbd doom-leader-alt-key) #'doom-leader-map)
+        (evil-define-key* '(normal visual motion) map (kbd doom-localleader-key) #'doom-localleader-map)
+        (evil-define-key* '(emacs insert) map (kbd doom-localleader-alt-key) #'doom-localleader-map))
       (general-override-mode +1))))
 
 
@@ -284,7 +342,6 @@ For example, :nvi will map to (list 'normal 'visual 'insert). See
       (let ((key (pop rest)))
         (cond ((listp key)
                (doom--map-nested nil key))
-
               ((keywordp key)
                (pcase key
                  (:leader
@@ -292,7 +349,7 @@ For example, :nvi will map to (list 'normal 'visual 'insert). See
                   (setq doom--map-fn 'doom--define-leader-key))
                  (:localleader
                   (doom--map-commit)
-                  (setq doom--map-fn 'define-localleader-key!))
+                  (setq doom--map-fn 'doom--define-localleader-leader-key))
                  (:after
                   (doom--map-nested (list 'after! (pop rest)) rest)
                   (setq rest nil))
@@ -318,6 +375,8 @@ For example, :nvi will map to (list 'normal 'visual 'insert). See
                                           :prefix prefix)
                                     rest))
                       (push `(defvar ,keymap (make-sparse-keymap))
+                            doom--map-forms)
+                      (push `(define-prefix-command ',keymap)
                             doom--map-forms))))
                  (:prefix
                   (cl-destructuring-bind (prefix . desc)
diff --git a/lisp/doom-packages.el b/lisp/doom-packages.el
index 72d3896b6..8232f16a0 100644
--- a/lisp/doom-packages.el
+++ b/lisp/doom-packages.el
@@ -97,7 +97,7 @@ uses a straight or package.el command directly).")
       ;; no affect on packages that are pinned, however (run 'doom purge' to
       ;; compact those after-the-fact). Some packages break when shallow cloned
       ;; (like magit and org), but we'll deal with that elsewhere.
-      straight-vc-git-default-clone-depth '(1 single-branch))
+      straight-vc-git-default-clone-depth 'full)
 
 (with-eval-after-load 'straight
   ;; HACK: Doom relies on deferred compilation, which spares the user 20-50min
@@ -179,35 +179,34 @@ uses a straight or package.el command directly).")
         (print! (start "Installing straight..."))
         (print-group!
          (cl-destructuring-bind (depth . options)
-             (ensure-list straight-vc-git-default-clone-depth)
-           (let ((branch-switch (if (memq 'single-branch options)
-                                    "--single-branch"
-                                  "--no-single-branch")))
-             (cond
-              ((eq 'full depth)
-               (funcall call "git" "clone" "--origin" "origin"
-                        branch-switch repo-url repo-dir))
-              ((integerp depth)
-               (if (null pin)
-                   (progn
-                     (when (file-directory-p repo-dir)
-                       (delete-directory repo-dir 'recursive))
-                     (funcall call "git" "clone" "--origin" "origin" repo-url
-                              "--no-checkout" repo-dir
+             (let ((branch-switch (if (memq 'single-branch options)
+                                      "--single-branch"
+                                    "--no-single-branch")))
+               (cond
+                ((eq 'full depth)
+                 (funcall call "git" "clone" "--origin" "origin"
+                          branch-switch repo-url repo-dir))
+                ((integerp depth)
+                 (if (null pin)
+                     (progn
+                       (when (file-directory-p repo-dir)
+                         (delete-directory repo-dir 'recursive))
+                       (funcall call "git" "clone" "--origin" "origin" repo-url
+                                "--no-checkout" repo-dir
+                                "--depth" (number-to-string depth)
+                                branch-switch
+                                "--no-tags"
+                                "--branch" straight-repository-branch))
+                   (make-directory repo-dir 'recursive)
+                   (let ((default-directory repo-dir))
+                     (funcall call "git" "init")
+                     (funcall call "git" "branch" "-m" straight-repository-branch)
+                     (funcall call "git" "remote" "add" "origin" repo-url
+                              "--master" straight-repository-branch)
+                     (funcall call "git" "fetch" "origin" pin
                               "--depth" (number-to-string depth)
-                              branch-switch
-                              "--no-tags"
-                              "--branch" straight-repository-branch))
-                 (make-directory repo-dir 'recursive)
-                 (let ((default-directory repo-dir))
-                   (funcall call "git" "init")
-                   (funcall call "git" "branch" "-m" straight-repository-branch)
-                   (funcall call "git" "remote" "add" "origin" repo-url
-                            "--master" straight-repository-branch)
-                   (funcall call "git" "fetch" "origin" pin
-                            "--depth" (number-to-string depth)
-                            "--no-tags")
-                   (funcall call "git" "reset" "--hard" pin)))))))))
+                              "--no-tags")
+                     (funcall call "git" "reset" "--hard" pin)))))))))
       (require 'straight (concat repo-dir "/straight.el"))
       (doom-log "Initializing recipes")
       (mapc #'straight-use-recipes
diff --git a/lisp/doom-ui.el b/lisp/doom-ui.el
index 172a67634..40a325722 100644
--- a/lisp/doom-ui.el
+++ b/lisp/doom-ui.el
@@ -198,7 +198,10 @@ windows, switch to `doom-fallback-buffer'. Otherwise, delegate to original
 `kill-current-buffer'."
   :before-until #'kill-current-buffer
   (let ((buf (current-buffer)))
-    (cond ((window-dedicated-p)
+    (cond ((eq (window-dedicated-p) 'popup)
+           (set-window-dedicated-p (selected-window) nil)
+           nil)
+          ((eq (window-dedicated-p) t)
            (delete-window)
            t)
           ((eq buf (doom-fallback-buffer))
diff --git a/lisp/lib/projects.el b/lisp/lib/projects.el
index ce7964421..5e4dd6be6 100644
--- a/lisp/lib/projects.el
+++ b/lisp/lib/projects.el
@@ -149,9 +149,10 @@ If DIR is not a project, it will be indexed (but not cached)."
             (if (doom-module-p :completion 'ivy)
                 #'counsel-projectile-find-file
               #'projectile-find-file)))
-          ((and (bound-and-true-p vertico-mode)
-                (fboundp '+vertico/find-file-in))
-           (+vertico/find-file-in default-directory))
+          ((bound-and-true-p vertico-mode)
+           (if (executable-find "fd")
+               (consult-fd dir)
+             (consult-find dir)))
           ((and (bound-and-true-p ivy-mode)
                 (fboundp 'counsel-file-jump))
            (call-interactively #'counsel-file-jump))
diff --git a/modules/completion/vertico/autoload/vertico.el b/modules/completion/vertico/autoload/vertico.el
index 0bfd9e00f..fcdfeb887 100644
--- a/modules/completion/vertico/autoload/vertico.el
+++ b/modules/completion/vertico/autoload/vertico.el
@@ -135,26 +135,6 @@ Supports exporting consult-grep to wgrep, file to wdeired, and consult-location
         (+vertico/embark-preview)
       (user-error (vertico-directory-enter)))))
 
-(defvar +vertico/find-file-in--history nil)
-;;;###autoload
-(defun +vertico/find-file-in (&optional dir initial)
-  "Jump to file under DIR (recursive).
-If INITIAL is non-nil, use as initial input."
-  (interactive)
-  (require 'consult)
-  (let* ((default-directory (or dir default-directory))
-         (prompt-dir (consult--directory-prompt "Find" default-directory))
-         (cmd (split-string-and-unquote +vertico-consult-fd-args " ")))
-    (find-file
-     (consult--read
-      (split-string (cdr (apply #'doom-call-process cmd)) "\n" t)
-      :prompt default-directory
-      :sort nil
-      :initial (if initial (shell-quote-argument initial))
-      :add-history (thing-at-point 'filename)
-      :category 'file
-      :history '(:input +vertico/find-file-in--history)))))
-
 ;;;###autoload
 (defun +vertico/jump-list (jump)
   "Go to an entry in evil's (or better-jumper's) jumplist."
diff --git a/modules/config/default/+evil-bindings.el b/modules/config/default/+evil-bindings.el
index f6d1c9225..0f1e1c787 100644
--- a/modules/config/default/+evil-bindings.el
+++ b/modules/config/default/+evil-bindings.el
@@ -660,36 +660,36 @@
         :desc "wanderlust" "m" #'=wanderlust))
 
       ;;; <leader> p --- project
-      (:prefix-map ("p" . "project")
-       :desc "Browse project"               "." #'+default/browse-project
-       :desc "Browse other project"         ">" #'doom/browse-in-other-project
-       :desc "Run cmd in project root"      "!" #'projectile-run-shell-command-in-root
-       :desc "Async cmd in project root"    "&" #'projectile-run-async-shell-command-in-root
-       :desc "Add new project"              "a" #'projectile-add-known-project
-       :desc "Switch to project buffer"     "b" #'projectile-switch-to-buffer
-       :desc "Compile in project"           "c" #'projectile-compile-project
-       :desc "Repeat last command"          "C" #'projectile-repeat-last-command
-       :desc "Remove known project"         "d" #'projectile-remove-known-project
-       :desc "Discover projects in folder"  "D" #'+default/discover-projects
-       :desc "Edit project .dir-locals"     "e" #'projectile-edit-dir-locals
-       :desc "Find file in project"         "f" #'projectile-find-file
-       :desc "Find file in other project"   "F" #'doom/find-file-in-other-project
-       :desc "Configure project"            "g" #'projectile-configure-project
-       :desc "Invalidate project cache"     "i" #'projectile-invalidate-cache
-       :desc "Kill project buffers"         "k" #'projectile-kill-buffers
-       :desc "Find other file"              "o" #'projectile-find-other-file
-       :desc "Switch project"               "p" #'projectile-switch-project
-       :desc "Find recent project files"    "r" #'projectile-recentf
-       :desc "Run project"                  "R" #'projectile-run-project
-       :desc "Save project files"           "s" #'projectile-save-project-buffers
-       :desc "List project todos"           "t" #'magit-todos-list
-       :desc "Test project"                 "T" #'projectile-test-project
-       :desc "Pop up scratch buffer"        "x" #'doom/open-project-scratch-buffer
-       :desc "Switch to scratch buffer"     "X" #'doom/switch-to-project-scratch-buffer
-       (:when (and (modulep! :tools taskrunner)
-                   (or (modulep! :completion ivy)
-                       (modulep! :completion helm)))
-        :desc "List project tasks"          "z" #'+taskrunner/project-tasks))
+      ;;(:prefix-map ("p" . "project")
+      ;; :desc "Browse project"               "." #'+default/browse-project
+      ;; :desc "Browse other project"         ">" #'doom/browse-in-other-project
+      ;; :desc "Run cmd in project root"      "!" #'projectile-run-shell-command-in-root
+      ;; :desc "Async cmd in project root"    "&" #'projectile-run-async-shell-command-in-root
+      ;; :desc "Add new project"              "a" #'projectile-add-known-project
+      ;; :desc "Switch to project buffer"     "b" #'projectile-switch-to-buffer
+      ;; :desc "Compile in project"           "c" #'projectile-compile-project
+      ;; :desc "Repeat last command"          "C" #'projectile-repeat-last-command
+      ;; :desc "Remove known project"         "d" #'projectile-remove-known-project
+      ;; :desc "Discover projects in folder"  "D" #'+default/discover-projects
+      ;; :desc "Edit project .dir-locals"     "e" #'projectile-edit-dir-locals
+      ;; :desc "Find file in project"         "f" #'projectile-find-file
+      ;; :desc "Find file in other project"   "F" #'doom/find-file-in-other-project
+      ;; :desc "Configure project"            "g" #'projectile-configure-project
+      ;; :desc "Invalidate project cache"     "i" #'projectile-invalidate-cache
+      ;; :desc "Kill project buffers"         "k" #'projectile-kill-buffers
+      ;; :desc "Find other file"              "o" #'projectile-find-other-file
+      ;; :desc "Switch project"               "p" #'projectile-switch-project
+      ;; :desc "Find recent project files"    "r" #'projectile-recentf
+      ;; :desc "Run project"                  "R" #'projectile-run-project
+      ;; :desc "Save project files"           "s" #'projectile-save-project-buffers
+      ;; :desc "List project todos"           "t" #'magit-todos-list
+      ;; :desc "Test project"                 "T" #'projectile-test-project
+      ;; :desc "Pop up scratch buffer"        "x" #'doom/open-project-scratch-buffer
+      ;; :desc "Switch to scratch buffer"     "X" #'doom/switch-to-project-scratch-buffer
+      ;; (:when (and (modulep! :tools taskrunner)
+      ;;             (or (modulep! :completion ivy)
+      ;;                 (modulep! :completion helm)))
+      ;;  :desc "List project tasks"          "z" #'+taskrunner/project-tasks))
 
       ;;; <leader> q --- quit/session
       (:prefix-map ("q" . "quit/session")
diff --git a/modules/config/default/autoload/files.el b/modules/config/default/autoload/files.el
index 115f71245..fddb5cec3 100644
--- a/modules/config/default/autoload/files.el
+++ b/modules/config/default/autoload/files.el
@@ -32,10 +32,14 @@
   (doom-project-find-file org-directory))
 
 ;;;###autoload
-(defun +default/find-file-under-here ()
-  "Perform a recursive file search from the current directory."
-  (interactive)
-  (doom-project-find-file default-directory))
+(defun +default/find-file-under-here (&optional prefix)
+  "Perform a recursive file search from the current directory.
+Prompt for directory if PREFIX."
+  (interactive "P")
+  (let ((dir (if prefix
+                 (read-directory-name "Directory: ")
+               default-directory)))
+    (doom-project-find-file dir)))
 
 ;;;###autoload
 (defun +default/discover-projects (arg)
diff --git a/modules/tools/lsp/+lsp.el b/modules/tools/lsp/+lsp.el
index 5ae4a417d..96361aae4 100644
--- a/modules/tools/lsp/+lsp.el
+++ b/modules/tools/lsp/+lsp.el
@@ -138,8 +138,11 @@ server getting expensively restarted when reverting buffers."
                                    " "))
           (add-to-list 'global-mode-string
                        '(t (:eval lsp-modeline-icon))
-                       'append))))))
+                       'append)))))
 
+  (when (modulep! :completion corfu)
+    (setq lsp-completion-provider :none)
+    (add-hook 'lsp-mode-hook #'lsp-completion-mode)))
 
 (use-package! lsp-ui
   :hook (lsp-mode . lsp-ui-mode)
