diff --git a/lisp/doom-keybinds.el b/lisp/doom-keybinds.el
index 0cc6e4841..e58e2e720 100644
--- a/lisp/doom-keybinds.el
+++ b/lisp/doom-keybinds.el
@@ -25,6 +25,14 @@ and Emacs states, and for non-evil users.")
 (defvar doom-leader-map (make-sparse-keymap)
   "An overriding keymap for <leader> keys.")
 
+(defvar doom-localleader-map-alist nil
+  "An alist mapping major modes to their localleader keymaps.")
+
+(defvar doom-localleader-map (make-sparse-keymap)
+  "The current major mode's localleader keymap.")
+
+(defvar doom-localleader-current-major-mode nil
+  "The major mode of the current localleader keymap.")
 
 ;;
 ;;; Global keybind settings
@@ -146,11 +154,8 @@ all hooks after it are ignored.")
                     forms))
             (when-let (desc (cadr (memq :which-key udef)))
               (prependq!
-               wkforms `((which-key-add-key-based-replacements
-                           (general--concat t doom-leader-alt-key ,key)
-                           ,desc)
-                         (which-key-add-key-based-replacements
-                           (general--concat t doom-leader-key ,key)
+               wkforms `((which-key-add-keymap-based-replacements doom-leader-map
+                           ,key
                            ,desc))))))))
     (macroexp-progn
      (append (and wkforms `((after! which-key ,@(nreverse wkforms))))
@@ -169,6 +174,43 @@ See `doom-leader-key' and `doom-leader-alt-key' to change the leader prefix."
     :keymaps 'doom-leader-map
     ,@args))
 
+(defmacro doom--define-localleader-leader-key (&rest keys)
+  (let ((modes (cl-mapcar #'general--remove-map
+                          (doom-unquote (progn (pop keys) (pop keys)))))
+        prefix forms wkforms result)
+    (macroexp-progn (dolist (mode modes result)
+                      (unless (keymapp (alist-get mode doom-localleader-map-alist))
+                        (setf (alist-get mode doom-localleader-map-alist)
+                              (make-sparse-keymap)))
+                      (let ((keys keys))
+                        (while keys
+                          (let ((key (pop keys))
+                                (def (pop keys)))
+                            (if (keywordp key)
+                                (when (memq key '(:prefix :infix))
+                                  (setq prefix def))
+                              (when prefix
+                                (setq key `(general--concat t ,prefix ,key)))
+                              (let* ((udef (cdr-safe (doom-unquote def)))
+                                     (bdef (if (general--extended-def-p udef)
+                                               (general--extract-def (general--normalize-extended-def udef))
+                                             def)))
+                                (unless (eq bdef :ignore)
+                                  (push `(define-key
+                                           (alist-get ',mode doom-localleader-map-alist)
+                                           (general--kbd ,key)
+                                           ,bdef)
+                                        forms))
+                                (when-let (desc (cadr (memq :which-key udef)))
+                                  (prependq!
+                                   wkforms `((which-key-add-keymap-based-replacements
+                                               (alist-get ',mode doom-localleader-map-alist)
+                                               ,key
+                                               ,desc))))))))
+                        (prependq! result
+                                   (append (and wkforms `((after! which-key ,@(nreverse wkforms))))
+                                           (nreverse forms))))))))
+
 (defmacro define-localleader-key! (&rest args)
   "Define <localleader> key.
 
@@ -196,8 +238,21 @@ localleader prefix."
 ;;   :prefix/:non-normal-prefix properties because general is incredibly slow
 ;;   binding keys en mass with them in conjunction with :states -- an effective
 ;;   doubling of Doom's startup time!
-(define-prefix-command 'doom/leader 'doom-leader-map)
 (define-key doom-leader-map [override-state] 'all)
+(define-prefix-command 'doom-leader-map)
+(define-prefix-command 'doom-localleader-map)
+
+(add-hook! '(after-change-major-mode-hook
+             doom-switch-buffer-hook
+             doom-switch-window-hook
+             doom-switch-frame-hook)
+  (defun doom-init-localleader-key-h ()
+    "Set the localleader keys for the current major-mode."
+    (unless (and (doom-unreal-buffer-p (current-buffer))
+                 (not (derived-mode-p 'text-mode 'prog-mode 'conf-mode)))
+      (setq doom-localleader-current-major-mode major-mode)
+      (set-keymap-parent doom-localleader-map
+                         (cdr (assq major-mode doom-localleader-map-alist))))))
 
 ;; Bind `doom-leader-key' and `doom-leader-alt-key' as late as possible to give
 ;; the user a chance to modify them.
@@ -211,9 +266,12 @@ localleader prefix."
                    (set-keymap-parent doom-leader-map mode-specific-map))
                   ((equal doom-leader-alt-key "C-x")
                    (set-keymap-parent doom-leader-map ctl-x-map)))
-            (define-key map (kbd doom-leader-alt-key) 'doom/leader))
-        (evil-define-key* '(normal visual motion) map (kbd doom-leader-key) 'doom/leader)
-        (evil-define-key* '(emacs insert) map (kbd doom-leader-alt-key) 'doom/leader))
+            (define-key map (kbd doom-leader-alt-key) #'doom-leader-map)
+            (define-key map (kbd doom-localleader-alt-key) #'doom-localleader-map))
+        (evil-define-key* '(normal visual motion) map (kbd doom-leader-key) #'doom-leader-map)
+        (evil-define-key* '(emacs insert) map (kbd doom-leader-alt-key) #'doom-leader-map)
+        (evil-define-key* '(normal visual motion) map (kbd doom-localleader-key) #'doom-localleader-map)
+        (evil-define-key* '(emacs insert) map (kbd doom-localleader-alt-key) #'doom-localleader-map))
       (general-override-mode +1))))
 
 
@@ -284,7 +342,6 @@ For example, :nvi will map to (list 'normal 'visual 'insert). See
       (let ((key (pop rest)))
         (cond ((listp key)
                (doom--map-nested nil key))
-
               ((keywordp key)
                (pcase key
                  (:leader
@@ -292,7 +349,7 @@ For example, :nvi will map to (list 'normal 'visual 'insert). See
                   (setq doom--map-fn 'doom--define-leader-key))
                  (:localleader
                   (doom--map-commit)
-                  (setq doom--map-fn 'define-localleader-key!))
+                  (setq doom--map-fn 'doom--define-localleader-leader-key))
                  (:after
                   (doom--map-nested (list 'after! (pop rest)) rest)
                   (setq rest nil))
@@ -318,6 +375,8 @@ For example, :nvi will map to (list 'normal 'visual 'insert). See
                                           :prefix prefix)
                                     rest))
                       (push `(defvar ,keymap (make-sparse-keymap))
+                            doom--map-forms)
+                      (push `(define-prefix-command ',keymap)
                             doom--map-forms))))
                  (:prefix
                   (cl-destructuring-bind (prefix . desc)
diff --git a/lisp/doom-ui.el b/lisp/doom-ui.el
index 360998c66..23066b502 100644
--- a/lisp/doom-ui.el
+++ b/lisp/doom-ui.el
@@ -210,7 +210,10 @@ windows, switch to `doom-fallback-buffer'. Otherwise, delegate to original
 `kill-current-buffer'."
   :before-until #'kill-current-buffer
   (let ((buf (current-buffer)))
-    (cond ((window-dedicated-p)
+    (cond ((eq (window-dedicated-p) 'popup)
+           (set-window-dedicated-p (selected-window) nil)
+           nil)
+          ((eq (window-dedicated-p) t)
            (delete-window)
            t)
           ((eq buf (doom-fallback-buffer))
diff --git a/lisp/lib/projects.el b/lisp/lib/projects.el
index ce7964421..ffd2aa9b1 100644
--- a/lisp/lib/projects.el
+++ b/lisp/lib/projects.el
@@ -150,8 +150,8 @@ If DIR is not a project, it will be indexed (but not cached)."
                 #'counsel-projectile-find-file
               #'projectile-find-file)))
           ((and (bound-and-true-p vertico-mode)
-                (fboundp '+vertico/find-file-in))
-           (+vertico/find-file-in default-directory))
+                (fboundp '+vertico/consult-fd-or-find))
+           (+vertico/consult-fd-or-find default-directory))
           ((and (bound-and-true-p ivy-mode)
                 (fboundp 'counsel-file-jump))
            (call-interactively #'counsel-file-jump))
diff --git a/modules/completion/vertico/autoload/vertico.el b/modules/completion/vertico/autoload/vertico.el
index 0bfd9e00f..a1114fb4a 100644
--- a/modules/completion/vertico/autoload/vertico.el
+++ b/modules/completion/vertico/autoload/vertico.el
@@ -135,26 +135,6 @@ Supports exporting consult-grep to wgrep, file to wdeired, and consult-location
         (+vertico/embark-preview)
       (user-error (vertico-directory-enter)))))
 
-(defvar +vertico/find-file-in--history nil)
-;;;###autoload
-(defun +vertico/find-file-in (&optional dir initial)
-  "Jump to file under DIR (recursive).
-If INITIAL is non-nil, use as initial input."
-  (interactive)
-  (require 'consult)
-  (let* ((default-directory (or dir default-directory))
-         (prompt-dir (consult--directory-prompt "Find" default-directory))
-         (cmd (split-string-and-unquote +vertico-consult-fd-args " ")))
-    (find-file
-     (consult--read
-      (split-string (cdr (apply #'doom-call-process cmd)) "\n" t)
-      :prompt default-directory
-      :sort nil
-      :initial (if initial (shell-quote-argument initial))
-      :add-history (thing-at-point 'filename)
-      :category 'file
-      :history '(:input +vertico/find-file-in--history)))))
-
 ;;;###autoload
 (defun +vertico/jump-list (jump)
   "Go to an entry in evil's (or better-jumper's) jumplist."
@@ -227,27 +207,10 @@ targets."
                    (not (string-suffix-p "-argument" (cdr binding))))))))
 
 ;;;###autoload
-(defun +vertico--consult--fd-make-builder ()
-  (let ((cmd (split-string-and-unquote +vertico-consult-fd-args)))
-    (lambda (input)
-      (pcase-let* ((`(,arg . ,opts) (consult--command-split input))
-                   (`(,re . ,hl) (funcall consult--regexp-compiler
-                                          arg 'extended t)))
-        (when re
-          (cons (append cmd
-                        (list (consult--join-regexps re 'extended))
-                        opts)
-                hl))))))
-
-(autoload #'consult--directory-prompt "consult")
-;;;###autoload
-(defun +vertico/consult-fd (&optional dir initial)
+(defun +vertico/consult-fd-or-find (&optional dir initial)
   (interactive "P")
   (if doom-projectile-fd-binary
-      (pcase-let* ((`(,prompt ,paths ,dir) (consult--directory-prompt "Fd" dir))
-                   (default-directory dir)
-                   (builder (consult--find-make-builder paths)))
-        (find-file (consult--find prompt builder initial)))
+      (consult-fd dir initial)
     (consult-find dir initial)))
 
 ;;;###autoload
diff --git a/modules/completion/vertico/config.el b/modules/completion/vertico/config.el
index a4efa7c4e..d01f2c112 100644
--- a/modules/completion/vertico/config.el
+++ b/modules/completion/vertico/config.el
@@ -7,9 +7,6 @@ The completion/vertico module uses the orderless completion style by default,
 but this returns too broad a candidate set for company completion. This variable
 overrides `completion-styles' during company completion sessions.")
 
-(defvar +vertico-consult-fd-args nil
-  "Shell command and arguments the vertico module uses for fd.")
-
 (defvar +vertico-consult-dir-container-executable "docker"
   "Command to call for listing container hosts.")
 
@@ -142,20 +139,18 @@ orderless."
     :before (list #'consult-recent-file #'consult-buffer)
     (recentf-mode +1))
 
-  (setq consult-project-root-function #'doom-project-root
+  (setq consult-project-function #'doom-project-root
         consult-narrow-key "<"
         consult-line-numbers-widen t
         consult-async-min-input 2
         consult-async-refresh-delay  0.15
         consult-async-input-throttle 0.2
         consult-async-input-debounce 0.1)
-  (unless +vertico-consult-fd-args
-    (setq +vertico-consult-fd-args
-          (if doom-projectile-fd-binary
-              (format "%s --color=never -i -H -E .git --regex %s"
-                      doom-projectile-fd-binary
-                      (if IS-WINDOWS "--path-separator=/" ""))
-            consult-find-args)))
+  (if doom-projectile-fd-binary
+      (setq consult-fd-args
+            '(doom-projectile-fd-binary
+              "--full-path --color=never -i -H -E .git --regex"
+              (when IS-WINDOWS "--path-separator=/"))))
 
   (consult-customize
    consult-ripgrep consult-git-grep consult-grep
@@ -305,9 +300,9 @@ orderless."
   (map! (:map embark-file-map
          :desc "Open target with sudo"        "s"   #'doom/sudo-find-file
          (:when (modulep! :tools magit)
-          :desc "Open magit-status of target" "g"   #'+vertico/embark-magit-status)
+           :desc "Open magit-status of target" "g"   #'+vertico/embark-magit-status)
          (:when (modulep! :ui workspaces)
-          :desc "Open in new workspace"       "TAB" #'+vertico/embark-open-in-new-workspace))))
+           :desc "Open in new workspace"       "TAB" #'+vertico/embark-open-in-new-workspace))))
 
 
 (use-package! marginalia
diff --git a/modules/completion/vertico/packages.el b/modules/completion/vertico/packages.el
index 68f1b73e9..98ce55310 100644
--- a/modules/completion/vertico/packages.el
+++ b/modules/completion/vertico/packages.el
@@ -1,22 +1,19 @@
 ;; -*- no-byte-compile: t; -*-
 ;;; completion/vertico/packages.el
 
-(package! vertico
-  :recipe (:host github :repo "minad/vertico"
-           :files ("*.el" "extensions/*.el"))
-  :pin "a28370d07f35c5387c7a9ec2e5b67f0d4598058d")
+(package! vertico  :pin "03bfb71a2b5db296a93eeb0752bd934d112e0792")
 
-(package! orderless :pin "e6784026717a8a6a7dcd0bf31fd3414f148c542e")
+(package! orderless :pin "d6b402a89e234d0e6166247ed6025f9acc8b4d9a")
 
-(package! consult :pin "fe49dedd71802ff97be7b89f1ec4bd61b98c2b13")
-(package! consult-dir :pin "ed8f0874d26f10f5c5b181ab9f2cf4107df8a0eb")
+(package! consult :pin "43380042daaaf57f60aa22962a97ed904a7d56ce")
+(package! consult-dir :pin "3f5f4b71ebe819392cb090cda71bd39a93bd830a")
 (when (and (modulep! :checkers syntax)
            (not (modulep! :checkers syntax +flymake)))
   (package! consult-flycheck :pin "3f2a7c17cc2fe64e0c07e3bf90e33c885c0d7062"))
-(package! embark :pin "9a44418c349e41020cdc5ad1bd21e8c77a429062")
-(package! embark-consult :pin "9a44418c349e41020cdc5ad1bd21e8c77a429062")
+(package! embark :pin "7758a1ac64d784fa71f14b202b7a26c27f29d03e")
+(package! embark-consult :pin "7758a1ac64d784fa71f14b202b7a26c27f29d03e")
 
-(package! marginalia :pin "866e50aee4f066b0903752c69b33e9b7cab93f97")
+(package! marginalia :pin "f1734375a5d8fa18e9cecb47ae4b5ae86c72399f")
 
 (package! wgrep :pin "3132abd3750b8c87cbcf6942db952acfab5edccd")
 
@@ -26,4 +23,4 @@
 (when (modulep! +childframe)
   (package! vertico-posframe
     :recipe (:host github :repo "tumashu/vertico-posframe")
-    :pin "7da6d648ff4202a48eb6647ee7dce8d65de48779"))
+    :pin "db9fbc95bb8316165ec74e500a76d6857e6ced1a"))
diff --git a/modules/config/default/autoload/files.el b/modules/config/default/autoload/files.el
index 115f71245..fddb5cec3 100644
--- a/modules/config/default/autoload/files.el
+++ b/modules/config/default/autoload/files.el
@@ -32,10 +32,14 @@
   (doom-project-find-file org-directory))
 
 ;;;###autoload
-(defun +default/find-file-under-here ()
-  "Perform a recursive file search from the current directory."
-  (interactive)
-  (doom-project-find-file default-directory))
+(defun +default/find-file-under-here (&optional prefix)
+  "Perform a recursive file search from the current directory.
+Prompt for directory if PREFIX."
+  (interactive "P")
+  (let ((dir (if prefix
+                 (read-directory-name "Directory: ")
+               default-directory)))
+    (doom-project-find-file dir)))
 
 ;;;###autoload
 (defun +default/discover-projects (arg)
diff --git a/modules/tools/lookup/autoload/lookup.el b/modules/tools/lookup/autoload/lookup.el
index 0a2002773..b72a52f4e 100644
--- a/modules/tools/lookup/autoload/lookup.el
+++ b/modules/tools/lookup/autoload/lookup.el
@@ -283,7 +283,7 @@ otherwise falling back to ffap.el (find-file-at-point)."
            (counsel-file-jump guess (doom-project-root)))
           ((and (modulep! :completion vertico)
                 (doom-project-p))
-           (+vertico/find-file-in (doom-project-root) guess))
+           (+vertico/consult-fd-or-find (doom-project-root) guess))
           ((find-file-at-point (ffap-prompter guess))))
     t))
 
diff --git a/modules/tools/lsp/+lsp.el b/modules/tools/lsp/+lsp.el
index 5ae4a417d..96361aae4 100644
--- a/modules/tools/lsp/+lsp.el
+++ b/modules/tools/lsp/+lsp.el
@@ -138,8 +138,11 @@ server getting expensively restarted when reverting buffers."
                                    " "))
           (add-to-list 'global-mode-string
                        '(t (:eval lsp-modeline-icon))
-                       'append))))))
+                       'append)))))
 
+  (when (modulep! :completion corfu)
+    (setq lsp-completion-provider :none)
+    (add-hook 'lsp-mode-hook #'lsp-completion-mode)))
 
 (use-package! lsp-ui
   :hook (lsp-mode . lsp-ui-mode)
