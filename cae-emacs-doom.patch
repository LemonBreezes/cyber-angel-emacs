diff --git a/lisp/doom-keybinds.el b/lisp/doom-keybinds.el
index 29788e9a9..1fb58a747 100644
--- a/lisp/doom-keybinds.el
+++ b/lisp/doom-keybinds.el
@@ -25,6 +25,14 @@ and Emacs states, and for non-evil users.")
 (defvar doom-leader-map (make-sparse-keymap)
   "An overriding keymap for <leader> keys.")
 
+(defvar doom-localleader-map-alist nil
+  "An alist mapping major modes to their localleader keymaps.")
+
+(defvar doom-localleader-map (make-sparse-keymap)
+  "The current major mode's localleader keymap.")
+
+(defvar doom-localleader-current-major-mode nil
+  "The major mode of the current localleader keymap.")
 
 ;;
 ;;; Global keybind settings
@@ -145,11 +153,8 @@ all hooks after it are ignored.")
                     forms))
             (when-let (desc (cadr (memq :which-key udef)))
               (prependq!
-               wkforms `((which-key-add-key-based-replacements
-                           (general--concat t doom-leader-alt-key ,key)
-                           ,desc)
-                         (which-key-add-key-based-replacements
-                           (general--concat t doom-leader-key ,key)
+               wkforms `((which-key-add-keymap-based-replacements doom-leader-map
+                           ,key
                            ,desc))))))))
     (macroexp-progn
      (append (and wkforms `((after! which-key ,@(nreverse wkforms))))
@@ -168,6 +173,43 @@ See `doom-leader-key' and `doom-leader-alt-key' to change the leader prefix."
     :keymaps 'doom-leader-map
     ,@args))
 
+(defmacro doom--define-localleader-leader-key (&rest keys)
+  (let ((modes (cl-mapcar #'general--remove-map
+                          (doom-unquote (progn (pop keys) (pop keys)))))
+        prefix forms wkforms result)
+    (macroexp-progn (dolist (mode modes result)
+                      (unless (keymapp (alist-get mode doom-localleader-map-alist))
+                        (setf (alist-get mode doom-localleader-map-alist)
+                              (make-sparse-keymap)))
+                      (let ((keys keys))
+                        (while keys
+                          (let ((key (pop keys))
+                                (def (pop keys)))
+                            (if (keywordp key)
+                                (when (memq key '(:prefix :infix))
+                                  (setq prefix def))
+                              (when prefix
+                                (setq key `(general--concat t ,prefix ,key)))
+                              (let* ((udef (cdr-safe (doom-unquote def)))
+                                     (bdef (if (general--extended-def-p udef)
+                                               (general--extract-def (general--normalize-extended-def udef))
+                                             def)))
+                                (unless (eq bdef :ignore)
+                                  (push `(define-key
+                                           (alist-get ',mode doom-localleader-map-alist)
+                                           (general--kbd ,key)
+                                           ,bdef)
+                                        forms))
+                                (when-let (desc (cadr (memq :which-key udef)))
+                                  (prependq!
+                                   wkforms `((which-key-add-keymap-based-replacements
+                                               (alist-get ',mode doom-localleader-map-alist)
+                                               ,key
+                                               ,desc))))))))
+                        (prependq! result
+                                   (append (and wkforms `((after! which-key ,@(nreverse wkforms))))
+                                           (nreverse forms))))))))
+
 (defmacro define-localleader-key! (&rest args)
   "Define <localleader> key.
 
@@ -195,8 +237,20 @@ localleader prefix."
 ;;   :prefix/:non-normal-prefix properties because general is incredibly slow
 ;;   binding keys en mass with them in conjunction with :states -- an effective
 ;;   doubling of Doom's startup time!
-(define-prefix-command 'doom/leader 'doom-leader-map)
 (define-key doom-leader-map [override-state] 'all)
+(define-prefix-command 'doom-leader-map)
+(define-prefix-command 'doom-localleader-map)
+
+(add-hook! '(after-change-major-mode-hook
+             doom-switch-buffer-hook
+             doom-switch-window-hook
+             doom-switch-frame-hook)
+  (defun doom-init-localleader-key-h ()
+    "Set the localleader keys for the current major-mode."
+    (unless (doom-unreal-buffer-p (current-buffer))
+      (setq doom-localleader-current-major-mode major-mode)
+      (set-keymap-parent doom-localleader-map
+                         (cdr (assq major-mode doom-localleader-map-alist))))))
 
 ;; Bind `doom-leader-key' and `doom-leader-alt-key' as late as possible to give
 ;; the user a chance to modify them.
@@ -210,9 +264,12 @@ localleader prefix."
                    (set-keymap-parent doom-leader-map mode-specific-map))
                   ((equal doom-leader-alt-key "C-x")
                    (set-keymap-parent doom-leader-map ctl-x-map)))
-            (define-key map (kbd doom-leader-alt-key) 'doom/leader))
-        (evil-define-key* '(normal visual motion) map (kbd doom-leader-key) 'doom/leader)
-        (evil-define-key* '(emacs insert) map (kbd doom-leader-alt-key) 'doom/leader))
+            (define-key map (kbd doom-leader-alt-key) #'doom-leader-map)
+            (define-key map (kbd doom-localleader-alt-key) #'doom-localleader-map))
+        (evil-define-key* '(normal visual motion) map (kbd doom-leader-key) #'doom-leader-map)
+        (evil-define-key* '(emacs insert) map (kbd doom-leader-alt-key) #'doom-leader-map)
+        (evil-define-key* '(normal visual motion) map (kbd doom-localleader-key) #'doom-localleader-map)
+        (evil-define-key* '(emacs insert) map (kbd doom-localleader-alt-key) #'doom-localleader-map))
       (general-override-mode +1))))
 
 
@@ -283,7 +340,6 @@ For example, :nvi will map to (list 'normal 'visual 'insert). See
       (let ((key (pop rest)))
         (cond ((listp key)
                (doom--map-nested nil key))
-
               ((keywordp key)
                (pcase key
                  (:leader
@@ -291,7 +347,7 @@ For example, :nvi will map to (list 'normal 'visual 'insert). See
                   (setq doom--map-fn 'doom--define-leader-key))
                  (:localleader
                   (doom--map-commit)
-                  (setq doom--map-fn 'define-localleader-key!))
+                  (setq doom--map-fn 'doom--define-localleader-leader-key))
                  (:after
                   (doom--map-nested (list 'after! (pop rest)) rest)
                   (setq rest nil))
@@ -317,6 +373,8 @@ For example, :nvi will map to (list 'normal 'visual 'insert). See
                                           :prefix prefix)
                                     rest))
                       (push `(defvar ,keymap (make-sparse-keymap))
+                            doom--map-forms)
+                      (push `(define-prefix-command ',keymap)
                             doom--map-forms))))
                  (:prefix
                   (cl-destructuring-bind (prefix . desc)
diff --git a/lisp/doom-packages.el b/lisp/doom-packages.el
index 0e6c2784f..b3b0aaa3f 100644
--- a/lisp/doom-packages.el
+++ b/lisp/doom-packages.el
@@ -97,7 +97,7 @@ uses a straight or package.el command directly).")
       ;; no affect on packages that are pinned, however (run 'doom purge' to
       ;; compact those after-the-fact). Some packages break when shallow cloned
       ;; (like magit and org), but we'll deal with that elsewhere.
-      straight-vc-git-default-clone-depth '(1 single-branch))
+      straight-vc-git-default-clone-depth 'full)
 
 (with-eval-after-load 'straight
   ;; HACK: Doom relies on deferred compilation, which spares the user 20-50min
@@ -179,35 +179,34 @@ uses a straight or package.el command directly).")
         (print! (start "Installing straight..."))
         (print-group!
          (cl-destructuring-bind (depth . options)
-             (ensure-list straight-vc-git-default-clone-depth)
-           (let ((branch-switch (if (memq 'single-branch options)
-                                    "--single-branch"
-                                  "--no-single-branch")))
-             (cond
-              ((eq 'full depth)
-               (funcall call "git" "clone" "--origin" "origin"
-                        branch-switch repo-url repo-dir))
-              ((integerp depth)
-               (if (null pin)
-                   (progn
-                     (when (file-directory-p repo-dir)
-                       (delete-directory repo-dir 'recursive))
-                     (funcall call "git" "clone" "--origin" "origin" repo-url
-                              "--no-checkout" repo-dir
+             (let ((branch-switch (if (memq 'single-branch options)
+                                      "--single-branch"
+                                    "--no-single-branch")))
+               (cond
+                ((eq 'full depth)
+                 (funcall call "git" "clone" "--origin" "origin"
+                          branch-switch repo-url repo-dir))
+                ((integerp depth)
+                 (if (null pin)
+                     (progn
+                       (when (file-directory-p repo-dir)
+                         (delete-directory repo-dir 'recursive))
+                       (funcall call "git" "clone" "--origin" "origin" repo-url
+                                "--no-checkout" repo-dir
+                                "--depth" (number-to-string depth)
+                                branch-switch
+                                "--no-tags"
+                                "--branch" straight-repository-branch))
+                   (make-directory repo-dir 'recursive)
+                   (let ((default-directory repo-dir))
+                     (funcall call "git" "init")
+                     (funcall call "git" "branch" "-m" straight-repository-branch)
+                     (funcall call "git" "remote" "add" "origin" repo-url
+                              "--master" straight-repository-branch)
+                     (funcall call "git" "fetch" "origin" pin
                               "--depth" (number-to-string depth)
-                              branch-switch
-                              "--no-tags"
-                              "--branch" straight-repository-branch))
-                 (make-directory repo-dir 'recursive)
-                 (let ((default-directory repo-dir))
-                   (funcall call "git" "init")
-                   (funcall call "git" "branch" "-m" straight-repository-branch)
-                   (funcall call "git" "remote" "add" "origin" repo-url
-                            "--master" straight-repository-branch)
-                   (funcall call "git" "fetch" "origin" pin
-                            "--depth" (number-to-string depth)
-                            "--no-tags")
-                   (funcall call "git" "reset" "--hard" pin)))))))))
+                              "--no-tags")
+                     (funcall call "git" "reset" "--hard" pin)))))))))
       (require 'straight (concat repo-dir "/straight.el"))
       (doom-log "Initializing recipes")
       (mapc #'straight-use-recipes
diff --git a/lisp/doom-ui.el b/lisp/doom-ui.el
index 05cc20c12..7ba7b1858 100644
--- a/lisp/doom-ui.el
+++ b/lisp/doom-ui.el
@@ -196,7 +196,10 @@ windows, switch to `doom-fallback-buffer'. Otherwise, delegate to original
 `kill-current-buffer'."
   :before-until #'kill-current-buffer
   (let ((buf (current-buffer)))
-    (cond ((window-dedicated-p)
+    (cond ((eq (window-dedicated-p) 'popup)
+           (set-window-dedicated-p (selected-window) nil)
+           nil)
+          ((eq (window-dedicated-p) t)
            (delete-window)
            t)
           ((eq buf (doom-fallback-buffer))
diff --git a/modules/completion/vertico/config.el b/modules/completion/vertico/config.el
index 1aa68732d..f795b64f7 100644
--- a/modules/completion/vertico/config.el
+++ b/modules/completion/vertico/config.el
@@ -239,8 +239,9 @@ orderless."
   :init
   (setq which-key-use-C-h-commands nil
         prefix-help-command #'embark-prefix-help-command)
+  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
   (map! [remap describe-bindings] #'embark-bindings
-        "C-;"               #'embark-act  ; to be moved to :config default if accepted
+        "C-;"               #'embark-act ; to be moved to :config default if accepted
         (:map minibuffer-local-map
          "C-;"               #'embark-act
          "C-c C-;"           #'embark-export
