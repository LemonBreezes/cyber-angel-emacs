;;; private/lisp/autoload/lispy.el -*- lexical-binding: t; -*-

;;;###autoload (autoload 'cae-lispy-cheat-sheet/body "private/lisp/autoload/lispy" nil t)
(let ((bindings
       '(("l" special-lispy-right "")
         ("h" special-lispy-left "")
         ("f" special-lispy-flow "")
         ("j" special-lispy-down "")
         ("k" special-lispy-up "")
         ("d" special-lispy-different "Move")
         ("o" special-lispy-goto-mode "Other")
         ("p" special-lispy-eval-other-window "Eval")
         ("P" special-lispy-paste "Edit")
         ("y" special-lispy-occur "Move")
         ("z" special-lh-knight/body "Move")
         ("J" special-lispy-outline-next "")
         ("K" special-lispy-outline-prev "")
         ("L" special-lispy-outline-goto-child "")
         ("r" special-lispy-raise "Edit")
         ("R" special-lispy-raise-some "Edit")
         ("C" special-lispy-convolute "Edit")
         ("X" special-lispy-convolute-left "Edit")
         ("w" special-lispy-move-up "Edit")
         ("s" special-lispy-move-down "Edit")
         ("O" special-lispy-oneline "Edit")
         ("M" special-lispy-alt-multiline "Edit")
         ("S" special-lispy-stringify "Edit")
         ("a" special-lispy-ace-symbol "Move")
         ("H" special-lispy-ace-symbol-replace "Edit")
         ("m" special-lispy-mark-list "Select")
         ("e" special-lispy-eval "Eval")
         ("E" special-lispy-eval-and-insert "Eval")
         ("g" special-lispy-goto-local "Move")
         ("G" special-lispy-goto "Move")
         ("F" special-lispy-follow "Move")
         ("D" special-pop-tag-mark "Move")
         ("A" special-lispy-beginning-of-defun "Move")
         ("i" special-lispy-tab "Edit")
         ("I" special-lispy-shifttab "View")
         ("N" special-lispy-narrow "View")
         ("W" special-lispy-widen "View")
         ("c" special-lispy-clone "Edit")
         ("u" special-lispy-undo "Other")
         ("q" special-lispy-ace-paren "Move")
         ("Q" special-lispy-ace-char "Move")
         ("v" special-lispy-view "View")
         ("t" special-lispy-teleport "Edit")
         ("n" special-lispy-new-copy "Select")
         ("b" special-lispy-back "Move")
         ("B" special-lispy-ediff-regions "View")
         ("x" special-lispy-x "Other")
         ("Z" special-lispy-edebug-stop "Other")
         ("V" special-lispy-visit "Other")
         (">" special-lispy-slurp "")
         ("<" special-lispy-barf "")
         ("." special-lispy-repeat "Other")
         (";" lispy-comment "")
         ("+" special-lispy-join "")
         ("/" special-lispy-splice "")
         ("-" special-lispy-ace-subword "Select")
         ("~" special-lispy-tilde "")
         ("_" special-lispy-underscore "")
         ("'" lispy-tick "")
         ("," nil ""))))
  (dolist (binding bindings)
    (define-key lispy-mode-map (car binding) (cadr binding)))
  (eval
   (append '(defhydra cae-lispy-cheat-sheet (:hint nil :foreign-keys run)
              ("<f6>" nil "Exit" :exit t))
           (cl-loop for binding in bindings
                    unless (or (string= (caddr binding) "")
                               (string= (car binding) ","))
                    collect
                    `(,(car binding)
                      ,(cadr binding)
                      ,(thread-last (symbol-name (cadr binding))
                                    (string-remove-prefix "special-")
                                    (string-remove-prefix "lispy-"))
                      :column ,(caddr binding))))
   t))
