;;; private/misc-applications/autoload/proced.el -*- lexical-binding: t; -*-

;;;###autoload (autoload '+proced-hydra/body "private/misc-applications/autoload/proced" nil t)
(eval
 `(defhydra +proced-hydra (:color pink :hint nil)
    ("<f6>" nil "Exit" :exit t)
    ("q" quit-window nil :exit t)
    ("g" revert-buffer "Refresh" :column "Display")
    ("C" proced-mark-children "Mark children" :column "Mark")
    ("F" proced-format-interactive "Set format" :column "Display")
    ("M" proced-mark-all "Mark all" :column "Mark")
    ("P" proced-mark-parents "Mark parents" :column "Mark")
    ("T" proced-toggle-tree "Toggle tree view" :column "Display")
    ("U" proced-unmark-all "Unmark all" :column "Mark")
    ;;("d" proced-mark :column "Mark")
    ("f" proced-filter-interactive "Set filter" :column "Display")
    ("k" proced-send-signal "Send signal" :column "Act")
    ("m" proced-mark "Mark" :column "Mark")
    ("o" proced-omit-processes "Hide marked processes" :column "Display")
    ("r" proced-renice "Set process priority" :column "Act")
    ,(if (modulep! :editor evil)
         '("t" proced-toggle-marks "Toggle marks" :column "Mark")
       '("~" proced-toggle-marks "Toggle marks" :column "Mark"))
    ("u" proced-unmark "Unmark" :column "Mark")
    ;;("x" proced-send-signal "Send signal" :column "Act")
    ("sS" proced-sort-interactive "Set sorting" :column "Sort")
    ("sc" proced-sort-pcpu "Sort by CPU usage" :column "Sort")
    ("sm" proced-sort-pmem "Sort by memory usage" :column "Sort")
    ("sp" proced-sort-pid "Sort by PID" :column "Sort")
    ("ss" proced-sort-start "Sort by start time" :column "Sort")
    ("st" proced-sort-time "Sort by CPU time" :column "Sort")
    ("su" proced-sort-user "Sort by user" :column "Sort"))
 t)
